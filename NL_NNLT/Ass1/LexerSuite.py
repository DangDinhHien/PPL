import unittest
from TestUtils import TestLexer

class LexerSuite(unittest.TestCase):      
    def test_errorstring(self):
        self.assertTrue(TestLexer.test("a.bc","a,Error Token .",180))
        self.assertTrue(TestLexer.test("a@bc","a,Error Token @",181))
        self.assertTrue(TestLexer.test("@bc","Error Token @",182))
        self.assertTrue(TestLexer.test("##bc","Error Token #",183))
        self.assertTrue(TestLexer.test("@bsc","Error Token @",184))
        self.assertTrue(TestLexer.test("bc;","bc,;,<EOF>",185))
        self.assertTrue(TestLexer.test("b^c","b,Error Token ^",186))
        self.assertTrue(TestLexer.test("c->d","c,-,>,d,<EOF>",187))
        self.assertTrue(TestLexer.test("...a","..,Error Token .",188))
        self.assertTrue(TestLexer.test("<asd>","<,asd,>,<EOF>",189))
    """ 10 test case illegal """
    def test_wrongstring(self):
    	self.assertTrue(TestLexer.test(""" "asd\\ ""","""Illegal Escape In String: asd\ """,190))
    	self.assertTrue(TestLexer.test(""" "asd\n" ""","""Unclosed String: asd""",191))
    	self.assertTrue(TestLexer.test(""" "asd ""","""Unclosed String: asd """,192))
    	self.assertTrue(TestLexer.test(""" "basdsda\r" ""","""Unclosed String: basdsda""",193))
    	self.assertTrue(TestLexer.test(""" "basds\da" ""","""Illegal Escape In String: basds\d""",194))
    	self.assertTrue(TestLexer.test(""" "basds\\t" ""","""basds\\t,<EOF>""",195))
    	self.assertTrue(TestLexer.test(""" "a\\t\\t" ""","""a\\t\\t,<EOF>""",196))
    	self.assertTrue(TestLexer.test(""" "basds\\\\m" ""","""basds\\\\m,<EOF>""",197))
    	self.assertTrue(TestLexer.test(""" "basds\\\\m\\\\\m" ""","""Illegal Escape In String: basds\\\\m\\\\\m""",198))
    	self.assertTrue(TestLexer.test(""" "basds\\\\m\\\\\m ""","""Illegal Escape In String: basds\\\\m\\\\\m""",199))
    def test_somekey(self):
       	self.assertTrue(TestLexer.test("a bc","a,bc,<EOF>",101))
        self.assertTrue(TestLexer.test("1.2","1.2,<EOF>",102))
        self.assertTrue(TestLexer.test("1.2e-3","1.2e-3,<EOF>",103))
        self.assertTrue(TestLexer.test("(*abc*)","<EOF>",104))
        self.assertTrue(TestLexer.test("//bts","<EOF>",105))
        self.assertTrue(TestLexer.test("[abc]","[,abc,],<EOF>",106))
        self.assertTrue(TestLexer.test("(abc]","(,abc,],<EOF>",107))
        self.assertTrue(TestLexer.test("(abc..k]","(,abc,..,k,],<EOF>",108))
        self.assertTrue(TestLexer.test("(abcdiv*k]","(,abcdiv,*,k,],<EOF>",109))
        self.assertTrue(TestLexer.test("array[1 .. 2]","array,[,1,..,2,],<EOF>",110))
        self.assertTrue(TestLexer.test("km;","km,;,<EOF>",111))
        self.assertTrue(TestLexer.test("1.","1.,<EOF>",112))
        self.assertTrue(TestLexer.test(".1",".1,<EOF>",113))
        self.assertTrue(TestLexer.test("array[1 .. 2]","array,[,1,..,2,],<EOF>",114))
        self.assertTrue(TestLexer.test("123asd","123,asd,<EOF>",121))
        self.assertTrue(TestLexer.test("intif","intif,<EOF>",122))
        self.assertTrue(TestLexer.test("in@tif","in,Error Token @",123))
        self.assertTrue(TestLexer.test(""" "int@if" ""","int@if,<EOF>",124))
        self.assertTrue(TestLexer.test(""" "int@#$%^if" ""","int@#$%^if,<EOF>",125))
        self.assertTrue(TestLexer.test(""" "int@#$%^;if" ""","int@#$%^;if,<EOF>",126))
        self.assertTrue(TestLexer.test(""" "123\\'123" ""","123\\'123,<EOF>",127))
        self.assertTrue(TestLexer.test(""" "123\\\'123" ""","123\\\'123,<EOF>",128))
        self.assertTrue(TestLexer.test(""" "k->3" ""","k->3,<EOF>",129))
    def test_somegrammar(self):
    	self.assertTrue(TestLexer.test("array[1+2 .. -3]","array,[,1,+,2,..,-,3,],<EOF>",130))
    	self.assertTrue(TestLexer.test("array[1+2-(a*3 mod 4) .. -3]","array,[,1,+,2,-,(,a,*,3,mod,4,),..,-,3,],<EOF>",131))
    	self.assertTrue(TestLexer.test("for (int i := 2; i++)","for,(,int,i,:=,2,;,i,+,+,),<EOF>",132))
    	self.assertTrue(TestLexer.test("if a>3 then x:=1","if,a,>,3,then,x,:=,1,<EOF>",133))
    	self.assertTrue(TestLexer.test("function lol(a,b : integer; c: real):real;","function,lol,(,a,,,b,:,integer,;,c,:,real,),:,real,;,<EOF>",134))
    	self.assertTrue(TestLexer.test("var x,y : integer;","var,x,,,y,:,integer,;,<EOF>",135))
    	self.assertTrue(TestLexer.test("var x,y : integer; m:real;","var,x,,,y,:,integer,;,m,:,real,;,<EOF>",136))
    	self.assertTrue(TestLexer.test("array[1+2 .. @]","array,[,1,+,2,..,Error Token @",137))
    	self.assertTrue(TestLexer.test("array[1+2 .. -x\\m]","array,[,1,+,2,..,-,x,Error Token \\",138))
    	self.assertTrue(TestLexer.test("array[1+2 .. -3]","array,[,1,+,2,..,-,3,],<EOF>",139))
    	self.assertTrue(TestLexer.test("array[1+2 .. -3] moddivforand","array,[,1,+,2,..,-,3,],moddivforand,<EOF>",140))
    def test_float(self):
    	self.assertTrue(TestLexer.test("1.2e-2","1.2e-2,<EOF>",141))
    	self.assertTrue(TestLexer.test("1.2E-2","1.2E-2,<EOF>",142))
    	self.assertTrue(TestLexer.test("1e-2","1e-2,<EOF>",143))
    	self.assertTrue(TestLexer.test("1E2","1E2,<EOF>",144))
    	self.assertTrue(TestLexer.test("9.0","9.0,<EOF>",145))
    	self.assertTrue(TestLexer.test("0.33E-123","0.33E-123,<EOF>",146))
    	self.assertTrue(TestLexer.test("1.2e-2.2","1.2e-2,.2,<EOF>",147))
    	self.assertTrue(TestLexer.test("1.2e-2e","1.2e-2,e,<EOF>",148))
    	self.assertTrue(TestLexer.test("1.2e-2ea","1.2e-2,ea,<EOF>",149))
    def test_integer(self):
        self.assertTrue(TestLexer.test("123213","123213,<EOF>",150))
        self.assertTrue(TestLexer.test("-123213","-,123213,<EOF>",151))
        self.assertTrue(TestLexer.test("--123213","-,-,123213,<EOF>",152))
        self.assertTrue(TestLexer.test("_123213","_123213,<EOF>",153))
        self.assertTrue(TestLexer.test("123,213","123,,,213,<EOF>",154))
        self.assertTrue(TestLexer.test("12321*3","12321,*,3,<EOF>",155))   
        self.assertTrue(TestLexer.test("123213\\","123213,Error Token \\",155))
        self.assertTrue(TestLexer.test("123213\\q","123213,Error Token \\",156)) 
        self.assertTrue(TestLexer.test("123.213\\q","123.213,Error Token \\",157)) 	
    def test_string(self):
        self.assertTrue(TestLexer.test(""" "123\\213" ""","Illegal Escape In String: 123\\2",158))
        self.assertTrue(TestLexer.test(""" "123\\\qsdsad" ""","123\\\qsdsad,<EOF>",159))
    def test_keyw(self):
        self.assertTrue(TestLexer.test("procedure main()","procedure,main,(,),<EOF>",160))
        self.assertTrue(TestLexer.test("procedure main() begin end","procedure,main,(,),begin,end,<EOF>",161))
        self.assertTrue(TestLexer.test("function main() begin end","function,main,(,),begin,end,<EOF>",162))
        self.assertTrue(TestLexer.test("if (a>3) else s--","if,(,a,>,3,),else,s,-,-,<EOF>",163))
        self.assertTrue(TestLexer.test("function lol(a,b : integer; c: real):real;","function,lol,(,a,,,b,:,integer,;,c,:,real,),:,real,;,<EOF>",164))
        self.assertTrue(TestLexer.test("if (a>3) else --s","if,(,a,>,3,),else,-,-,s,<EOF>",165))
        self.assertTrue(TestLexer.test("procedure main(a;b)","procedure,main,(,a,;,b,),<EOF>",166))
        self.assertTrue(TestLexer.test("with a:integerr;do","with,a,:,integerr,;,do,<EOF>",167))
        self.assertTrue(TestLexer.test("while a>b do begin end","while,a,>,b,do,begin,end,<EOF>",168))
        self.assertTrue(TestLexer.test("for i:=n downto i do -l","for,i,:=,n,downto,i,do,-,l,<EOF>",169))
    def test_string(self):
        self.assertTrue(TestLexer.test(""" "asdasd\n" ""","""Unclosed String: asdasd""",170))        
        self.assertTrue(TestLexer.test(""" "asdasd\\\\\\td" ""","""asdasd\\\\\\td,<EOF>""",171))
    def test_array(self):
        self.assertTrue(TestLexer.test("array[1 .. func(2)]","array,[,1,..,func,(,2,),],<EOF>",172)) 
        self.assertTrue(TestLexer.test("array[1 .. func(x,y)]","array,[,1,..,func,(,x,,,y,),],<EOF>",173))   
        self.assertTrue(TestLexer.test("array[1 .. .. func(2)]","array,[,1,..,..,func,(,2,),],<EOF>",174))
    def test_bigprogram(self):
        self.assertTrue(TestLexer.test("var lppl : array[1 .. 30249] of string;","var,lppl,:,array,[,1,..,30249,],of,string,;,<EOF>",175)) 
        self.assertTrue(TestLexer.test("foo(2)[3] := a[foo(2)[3]] + -3;","foo,(,2,),[,3,],:=,a,[,foo,(,2,),[,3,],],+,-,3,;,<EOF>",176)) 
        self.assertTrue(TestLexer.test("foo(2)[3]with := a[foo(2)[3]] + -3;","foo,(,2,),[,3,],with,:=,a,[,foo,(,2,),[,3,],],+,-,3,;,<EOF>",177)) 
        self.assertTrue(TestLexer.test("foo(2)[3]with do := a[foo(2)[3]] + -3;","foo,(,2,),[,3,],with,do,:=,a,[,foo,(,2,),[,3,],],+,-,3,;,<EOF>",178)) 
        self.assertTrue(TestLexer.test("array[a- .. func(2)]","array,[,a,-,..,func,(,2,),],<EOF>",179)) 
        
    	
    	

        
