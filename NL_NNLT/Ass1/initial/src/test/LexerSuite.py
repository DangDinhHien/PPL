import unittest
from TestUtils import TestLexer

class LexerSuite(unittest.TestCase):
      
    def test_identifier(self):
        self.assertTrue(TestLexer.test("abc","abc,<EOF>",101))
        self.assertTrue(TestLexer.test("aCBbdc","aCBbdc,<EOF>",102))
        self.assertTrue(TestLexer.test("aAsVN","aAsVN,<EOF>",103))
        self.assertTrue(TestLexer.test("___","___,<EOF>",104))
        self.assertTrue(TestLexer.test("_a123","_a123,<EOF>",105))
        self.assertTrue(TestLexer.test("123_a","123,_a,<EOF>",106))
        self.assertTrue(TestLexer.test("12\"","12,Unclosed String: ",107))
        self.assertTrue(TestLexer.test("123@","123,Error Token @",108))
        self.assertTrue(TestLexer.test("123t12a","123,t12a,<EOF>",109))

    def test_integer(self):
        self.assertTrue(TestLexer.test("123a123","123,a123,<EOF>",110))
        self.assertTrue(TestLexer.test("123456123_","123456123,_,<EOF>",111))
        self.assertTrue(TestLexer.test("123a123","123,a123,<EOF>",112))
        self.assertTrue(TestLexer.test("123a123","123,a123,<EOF>",113))
        self.assertTrue(TestLexer.test("123a123","123,a123,<EOF>",114))
    def test_float(self):
        self.assertTrue(TestLexer.test("123.1","123.1,<EOF>",115))
        self.assertTrue(TestLexer.test("123.1E10","123.1E10,<EOF>",116))
        self.assertTrue(TestLexer.test("23.1E-10","23.1E-10,<EOF>",117))
        self.assertTrue(TestLexer.test(".1e5-1",".1e5,-,1,<EOF>",118))
        self.assertTrue(TestLexer.test("23.1E-5","23.1E-5,<EOF>",119))

    def test_STRINGLIT(self): 
        self.assertTrue(TestLexer.test(""" " " """,""" ,<EOF>""",130))
        self.assertTrue(TestLexer.test(" \"\\\\\\t\" " ,"""\\\\\\t,<EOF>""",131))
        self.assertTrue(TestLexer.test(""" "aadadddldld" ""","""aadadddldld,<EOF>""",132))
        self.assertTrue(TestLexer.test(""" "a@@#$$%%" ""","""a@@#$$%%,<EOF>""",133))
        self.assertTrue(TestLexer.test(""" "akdkkk\\\\kadadad" ""","""akdkkk\\\\kadadad,<EOF>""",134))
        self.assertTrue(TestLexer.test(""" "\\t" ""","""\\t,<EOF>""",135))
        self.assertTrue(TestLexer.test(" \"\\takvjv\" " ,"""\\takvjv,<EOF>""",136))
        self.assertTrue(TestLexer.test(" \"aaaa\\t\" " ,"""aaaa\\t,<EOF>""",137))
        self.assertTrue(TestLexer.test(" \"\\\"nbnbn\" " ,"""\\\"nbnbn,<EOF>""",138))
        self.assertTrue(TestLexer.test(" \"\\\\\" " ,"""\\\\,<EOF>""",139))
        
    def test_ILLEGAL_ESCAPE(self):
        self.assertTrue(TestLexer.test(""" "aa\\kbb" ""","""Illegal Escape In String: aa\\k""",140))
        self.assertTrue(TestLexer.test(""" "akdkkk\\\\\\kadadad" ""","""Illegal Escape In String: akdkkk\\\\\\k""",141))
        self.assertTrue(TestLexer.test(""" "akdkkk\\\\ka\\da\\\\dad" ""","""Illegal Escape In String: akdkkk\\\\ka\\d""",142))
        self.assertTrue(TestLexer.test(""" "akdkkk\\\\k...1..a\\da\\\\dad" ""","""Illegal Escape In String: akdkkk\\\\k...1..a\\d""",143))
        self.assertTrue(TestLexer.test(""" "aakdkdk\\t\\hbb" ""","""Illegal Escape In String: aakdkdk\\t\\h""",144)) 
        self.assertTrue(TestLexer.test(""" "\\k" ""","""Illegal Escape In String: \\k""",145))    
        self.assertTrue(TestLexer.test(" \"\\ ","Illegal Escape In String: \\ ",146))
        self.assertTrue(TestLexer.test(" \"\\t\\ ","Illegal Escape In String: \\t\\ ",147))
        self.assertTrue(TestLexer.test(" \"\\k\\\\ ","Illegal Escape In String: \\k",148))
        self.assertTrue(TestLexer.test(" \"\\\\\\u\" ","Illegal Escape In String: \\\\\\u",149))
    
    def test_UNCLOSE_STRING(self):
        self.assertTrue(TestLexer.test("\"\\\\\\\" ","Unclosed String: \\\\\\\" ",150))
        self.assertTrue(TestLexer.test(" \"\\\" " ,"""Unclosed String: \\" """,151))
        self.assertTrue(TestLexer.test(" \"avcdq","""Unclosed String: avcdq""",152))
        self.assertTrue(TestLexer.test(" \"a@@#$$%% ","""Unclosed String: a@@#$$%% """,153))
        self.assertTrue(TestLexer.test(" \"abcd\" \"xyz ","""abcd,Unclosed String: xyz """,154))
        self.assertTrue(TestLexer.test(" \"\"\" ",""",Unclosed String:  """,155))
        self.assertTrue(TestLexer.test(" \" abc\\r\\n \" ",""" abc\\r\\n ,<EOF>""",156))
        self.assertTrue(TestLexer.test(" \"\\t ","Unclosed String: \\t ",157))
        self.assertTrue(TestLexer.test(" \"\\h ","Illegal Escape In String: \\h",158))
        self.assertTrue(TestLexer.test(" \"\\b ","Unclosed String: \\b ",159))
    def test_REAL_ARRAY(self):
        self.assertTrue(TestLexer.test("var i:array [1 .. 5] of interger;","var,i,:,array,[,1,..,5,],of,interger,;,<EOF>",160))
        self.assertTrue(TestLexer.test("var i:array [1+5+2 .. 5] of interger;","var,i,:,array,[,1,+,5,+,2,..,5,],of,interger,;,<EOF>",161))
        self.assertTrue(TestLexer.test("1.e-10","1.e-10,<EOF>",162))
        self.assertTrue(TestLexer.test("1e10","1e10,<EOF>",163))
        self.assertTrue(TestLexer.test("1.1e-10","1.1e-10,<EOF>",164))
        self.assertTrue(TestLexer.test(".1e-10",".1e-10,<EOF>",165))
        self.assertTrue(TestLexer.test(".1",".1,<EOF>",166))
        self.assertTrue(TestLexer.test("1..","1.,Error Token .",167))
        self.assertTrue(TestLexer.test("1 ..","1,..,<EOF>",168))
        self.assertTrue(TestLexer.test("143e","143,e,<EOF>",169))
    def test_separator(self):
        self.assertTrue(TestLexer.test("a:=b[10];","a,:=,b,[,10,],;,<EOF>",170))
        self.assertTrue(TestLexer.test("array [1 .. 2]","array,[,1,..,2,],<EOF>",171))
        self.assertTrue(TestLexer.test("a(5);","a,(,5,),;,<EOF>",172))
        self.assertTrue(TestLexer.test("var a,b,c:integer;","var,a,,,b,,,c,:,integer,;,<EOF>",173))
        self.assertTrue(TestLexer.test("a[intt(5)]","a,[,intt,(,5,),],<EOF>",174))
    def test_keywords(self):
        self.assertTrue(TestLexer.test("var i:array [1 .. 5] of interger;","var,i,:,array,[,1,..,5,],of,interger,;,<EOF>",120))
        self.assertTrue(TestLexer.test("function foo([var a = 5;]);","function,foo,(,[,var,a,=,5,;,],),;,<EOF>",121))
        self.assertTrue(TestLexer.test("123 and 123456","123,and,123456,<EOF>",122))
        self.assertTrue(TestLexer.test("if(a>b)then","if,(,a,>,b,),then,<EOF>",123))
        self.assertTrue(TestLexer.test("return true false","return,true,false,<EOF>",124))
        self.assertTrue(TestLexer.test("Procedure main();","Procedure,main,(,),;,<EOF>",175))
        self.assertTrue(TestLexer.test("begin end","begin,end,<EOF>",176))
        self.assertTrue(TestLexer.test("with a:integer;do","with,a,:,integer,;,do,<EOF>",177))
        self.assertTrue(TestLexer.test("while a>b do","while,a,>,b,do,<EOF>",178))
        self.assertTrue(TestLexer.test("for i:=n downto i do","for,i,:=,n,downto,i,do,<EOF>",179))
        self.assertTrue(TestLexer.test("i:real;","i,:,real,;,<EOF>",180))
        self.assertTrue(TestLexer.test("if(S>20) then break;","if,(,S,>,20,),then,break,;,<EOF>",181))
        self.assertTrue(TestLexer.test("if(S>20) then continue;","if,(,S,>,20,),then,continue,;,<EOF>",182))
        self.assertTrue(TestLexer.test("a and b and not c","a,and,b,and,not,c,<EOF>",183))
        self.assertTrue(TestLexer.test("g mod 5 = a div b","g,mod,5,=,a,div,b,<EOF>",184))
    def test_operator(self):
        self.assertTrue(TestLexer.test("x=5;","x,=,5,;,<EOF>",115))
        self.assertTrue(TestLexer.test("6>=5;","6,>=,5,;,<EOF>",126))
        self.assertTrue(TestLexer.test("x<=y and y<=5;","x,<=,y,and,y,<=,5,;,<EOF>",127))
        self.assertTrue(TestLexer.test("x>z;","x,>,z,;,<EOF>",128))
        self.assertTrue(TestLexer.test("a=x div z","a,=,x,div,z,<EOF>",129))
        self.assertTrue(TestLexer.test("a*b+c--d","a,*,b,+,c,-,-,d,<EOF>",185))
        self.assertTrue(TestLexer.test("a/b/d-2","a,/,b,/,d,-,2,<EOF>",186))
        self.assertTrue(TestLexer.test("n:=n--1","n,:=,n,-,-,1,<EOF>",187))
        self.assertTrue(TestLexer.test("a mod b = c","a,mod,b,=,c,<EOF>",188))
        self.assertTrue(TestLexer.test("-a+d","-,a,+,d,<EOF>",189))
    def test_all(self): 
        self.assertTrue(TestLexer.test("n:= a or b or c and d;","n,:=,a,or,b,or,c,and,d,;,<EOF>",190))
        self.assertTrue(TestLexer.test("while ((n<10) and (a>b)) do","while,(,(,n,<,10,),and,(,a,>,b,),),do,<EOF>",191))
        self.assertTrue(TestLexer.test("a:= 5+bcd()+edf()[1];","a,:=,5,+,bcd,(,),+,edf,(,),[,1,],;,<EOF>",192))
        self.assertTrue(TestLexer.test("n:= a(1,2)[b(123+5)[c(174.145)]];","n,:=,a,(,1,,,2,),[,b,(,123,+,5,),[,c,(,174.145,),],],;,<EOF>",193))
        self.assertTrue(TestLexer.test("for i:=1 to n do","for,i,:=,1,to,n,do,<EOF>",194))
        self.assertTrue(TestLexer.test("Procedure main()begin","Procedure,main,(,),begin,<EOF>",195))
        self.assertTrue(TestLexer.test("main := f := i := 100;","main,:=,f,:=,i,:=,100,;,<EOF>",196))
        self.assertTrue(TestLexer.test("var a:array[1-2 .. 5] of integer;","var,a,:,array,[,1,-,2,..,5,],of,integer,;,<EOF>",197))
        self.assertTrue(TestLexer.test("putIntLn(main );","putIntLn,(,main,),;,<EOF>",198))
        self.assertTrue(TestLexer.test("def test_call_function_249(self):","def,test_call_function_249,(,self,),:,<EOF>",199))
        self.assertTrue(TestLexer.test("def test:","def,test,:,<EOF>",200))
